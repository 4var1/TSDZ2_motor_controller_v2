transport select swd

set CHIPNAME xmc1300
set WORKAREASIZE 0x4000
set APPLICATION_FLASH_START_ADDR 0x10001000
set APPLICATION_FLASH_END_ADDR 0x10010FFF
set APPLICATION_RESET_HANDLER_VECTOR_ADDR 0x10001004
source [find target/xmc1xxx.cfg]

reset_config none
cortex_m reset_config sysresetreq
adapter speed 10000

#Override reset procedure to archive correct operation of halt after reset

proc ocd_process_reset_inner { MODE } {
	global _TARGETNAME
	global APPLICATION_FLASH_START_ADDR
	global APPLICATION_FLASH_END_ADDR
	global APPLICATION_RESET_HANDLER_VECTOR_ADDR

	if { 0 != [string compare $_TARGETNAME [target names]] } {
		return -code error "XMC1300 reset can handle only one $_TARGETNAME target";
	}
	set t $_TARGETNAME
	
	# If this target must be halted...
	set halt -1
	if { 0 == [string compare $MODE halt] } {
		set halt 1
	}
	if { 0 == [string compare $MODE init] } {
		set halt 1;
	}
	if { 0 == [string compare $MODE run ] } {
		set halt 0;
	}
	if { $halt < 0 } {
		return -code error "Invalid mode: $MODE, must be one of: halt, init, or run";
	}

	$t invoke-event reset-start
	$t invoke-event reset-assert-pre
	$t arp_examine
	$t arp_halt
	# Catch, but ignore any errors.
	catch { $t arp_waitstate halted 5000 }

	# Did we succeed?
	set s [$t curstate]

	if { 0 != [string compare $s "halted" ] } {
		return -code error [format "TARGET: %s - Not halted" $t]
	}
	
	# Let's read where application entry point resides
	mem2array APPLICATION_RESET_HANDLER_ADDR_ARRAY 32 $APPLICATION_RESET_HANDLER_VECTOR_ADDR 1
	
	# Because cortex m0 supports thumb instruction set only we need to substract -1 (LSB) from "thumb pointer" to get the absolute address	
	set APPLICATION_RESET_HANDLER_ADDR [format 0x%x [incr APPLICATION_RESET_HANDLER_ADDR_ARRAY(0) -1] ]

	set ENTRY_POINT_RESIDES_IN_APPLICATION_FLASH 1
	#Check that we have sane address for the first application instruction to be executed
	if { ( $APPLICATION_RESET_HANDLER_ADDR < $APPLICATION_FLASH_START_ADDR ) || ( $APPLICATION_RESET_HANDLER_ADDR > $APPLICATION_FLASH_END_ADDR ) } {
		set ENTRY_POINT_RESIDES_IN_APPLICATION_FLASH 0
	}
	
	#Set breakpoint to reset handler if halt is required and breakpoint can be set in application flash address
	if { $ENTRY_POINT_RESIDES_IN_APPLICATION_FLASH } {
		if  { $halt } {
			echo "XMC1300 Halt after reset: Setting breakpoint to first instruction of reset handler(entry point) to archive halt after reset."
			bp $APPLICATION_RESET_HANDLER_ADDR 2 hw
		} else {
			rbp $APPLICATION_RESET_HANDLER_ADDR
		}
	} else {
		echo "XMC1300 Halt after reset: Address for reset handler(entry point) doesn't reside in application flash and breakpoint cannot be set. Doing reset; halt; instead of reset halt"
	}

	
	#Reset without halt to not use vector catch
	$t arp_reset assert 0
	
	$t invoke-event reset-assert-post
	$t invoke-event reset-deassert-pre

	$t arp_reset deassert 0
		
	$t invoke-event reset-deassert-post
	
	# Pass 1 - Now wait for any halt (requested as part of reset
	# assert/deassert) to happen.  Ideally it takes effect without
	# first executing any instructions.
	if { $halt } {
		if {!$ENTRY_POINT_RESIDES_IN_APPLICATION_FLASH} {
			$t arp_waitstate running 200
			$t arp_halt
		}
		catch { $t arp_waitstate halted 1000 }

		# Did we succeed?
		set s [$t curstate]
		
		if { 0 != [string compare $s "halted" ] } {
			return -code error [format "TARGET: %s - Not halted" $t]
		}
		
	}

	#Remove breakpoint used for halting after reset
	if {$ENTRY_POINT_RESIDES_IN_APPLICATION_FLASH} {
		rbp $APPLICATION_RESET_HANDLER_ADDR
	}
	
	#Pass 2 - if needed "init"
	if { 0 == [string compare init $MODE] } {
		set err [catch "$t arp_waitstate halted 5000"]

		# Did it halt?
		if { $err == 0 } {
			$t invoke-event reset-init
		}
	}

	$t invoke-event reset-end
}


set XMC_BMI_ADDR 0x10000E00

array set XMC_BMI_MODES_ARRAY {
		0xffc0	"ASC Bootstrap Load Mode (ASC_BSL)"		
		0xf8c1	"User Mode (Productive)"
		0xf8c3	"User Mode (Debug) SWD0"
		0xfac3	"User Mode (Debug) SWD1"
		0xf9c3	"User Mode (Debug) SPD0"
		0xfbc3	"User Mode (Debug) SPD1"
		0xf8c7	"User Mode (HAR) SWD0"
		0xfac7	"User Mode (HAR) SWD1"
		0xf9c7	"User Mode (HAR) SPD0"
		0xfbc7	"User Mode (HAR) SPD1"
}

proc read_xmc_bmi {} {
		global _TARGETNAME
		global XMC_BMI_ADDR
		global XMC_BMI_MODES_ARRAY
		
		set t $_TARGETNAME
		
		echo "Reading XMC BootModeIndex"
		catch { $t arp_waitstate halted 1000 }

		# Did we succeed?
		set s [$t curstate]
		
		if { 0 != [string compare $s "halted" ] } {
			return -code error [format "TARGET: %s - Not halted" $t]
		}
		
		#Get BMI
		mem2array XMC_BMI_VALUE_FROM_TARGET_ARRAY 16 $XMC_BMI_ADDR 1
		set XMC_BMI_VALUE_FROM_TARGET [format 0x%x $XMC_BMI_VALUE_FROM_TARGET_ARRAY(0)]
		
		
		if {[info exists XMC_BMI_MODES_ARRAY($XMC_BMI_VALUE_FROM_TARGET)]} {
			return "BMI Value: $XMC_BMI_VALUE_FROM_TARGET - $XMC_BMI_MODES_ARRAY($XMC_BMI_VALUE_FROM_TARGET)"
		} else {
			return -code error [format "BMI Value: $XMC_BMI_VALUE_FROM_TARGET - Unknown"]
		}
}

#proc write_xmc_bmi { param_bmi } {
#		echo "Writing XMC BootModeIndex"
#		catch { $t arp_waitstate halted 1000 }

		# Did we succeed?
#		set s [$t curstate]
		
#		if { 0 != [string compare $s "halted" ] } {
#			return -code error [format "TARGET: %s - Not halted" $t]
#		}
		
		
		##TODO
		##Check parameter is valid
		##Call rom function to write BMI
		##reset halt; maybe?
		##quit openocd maybe as connection to target is most likelly lost?
		
#}
